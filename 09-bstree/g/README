
BINARY SEARCH TREE
------------------

Tree is a connected acyclic graph. (Although you may not understand the full
meaning of this statement, it is worthwhile to remember this).

A tree can have leaf nodes and non-leaf (also called intermediate) nodes.
Leaf nodes have NO children. Non-leaf nodes have ATLEAST one child.

A binary tree is a tree where each node has ATMOST 2 children: a left child,
and a right child.

A binary search tree is a binary tree which follows two rules.
    - All values in left subtree  <  Value at parent
    - All values in right subtree >= Value at parent

A binary search tree with integer values at each node looks as follows.

     4
    / \
   /   \
  2     6
 / \   / \
1   3 5   7


Exercise 1
----------

Create a file bstree.h with the following declarations.

    struct BSTreeNode
    {
        int val;
        BStreeNode *left;
        BStreeNode *right;
    };

    class BSTree
    {
        BSTreeNode *root;

    public:
        BSTree();
        void add(int val);
        void remove(int val);
        int search(int val);
    };

The constructor should set the member 'root' to NULL.

The 'add' should allocate a node, assign 'val' to the node, and add the
node to the tree pointed by 'root'.

The 'remove' should search for a node with value 'val', remove the node
from the tree, and free the memory for the node.

The 'search' should scan the tree for a node with value 'val'. If such a node
is found, it should return 1, 0 otherwise.

Create a file bstree.cpp with the implementation of the above functions.

You can test using 'make test_bstree1'.


Exercise 2
----------

*** YOU HAVE TO FINISH EXERCISE 1 BEFORE PROCEEDING ***

Modify the class BSTree (in bstree.h) and add the following public member
function to the class.

        int get_height(void);

The 'get_height' should return the height of the binary search tree. The height
of a binary search tree is defined as the number of edges in the longest
path from root to any leaf node. For example, the height of the tree in the
introductory section is 2. That is, there are two edges in the longest path
from root to any leaf. Alternately, the height can also be thought of as
the number of nodes in the longest path minus 1.

[Note: To determine the height you have to do a complete 
tree traversal, but you can traverse in any order - preorder, inorder or 
postorder].

Implement the above function in bstree.cpp.

You can test using 'make test_bstree2'.


Exercise 3
----------

*** YOU HAVE TO FINISH EXERCISE 1 BEFORE PROCEEDING ***

Modify the class BSTree (in bstree.h) and add the following public member
function to the class.

        void get_postorder(int *arr, int *count);

The 'get_postorder' should do a postorder traversal of the tree and store the
values in the tree (in postorder form) in 'arr' array. It should also store 
the number of nodes in the tree in the 'count'.

Implement the above function in bstree.cpp.

You can test using 'make test_bstree3'.
