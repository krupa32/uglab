
Exercise 1
----------

Create a file list.h with the following declarations.

    struct node
    {
        char c;
        struct node *next;
    };

    struct list
    {
        struct node *head;
    };
    
    struct list * list_create(void);

    void list_free(struct list *l);

    void list_add_head(struct list *l, struct node *n);

    void list_add_tail(struct list *l, struct node *n);

    void list_del(struct list *l, struct node *n);


Create a file list.c that implements the functions declared above.

You can test using 'make test_list'.


Exercise 2
----------

Create a file queue.h with the following declarations.

    void * queue_create(void);

    void queue_free(void *queue);

    int queue_insert(void *queue, char c);

    int queue_remove(void *queue, char *c);

    int queue_empty(void *queue);

The 'queue_insert' function should insert 'c' into the queue.

The 'queue_remove' function should store the character removed from the queue
in the character pointer passed as parameter.

The 'queue_empty' function should return 1 if the queue is empty, 0 otherwise.

Create a file queue.c which includes "list.h" and implements the above 
functions. DO NOT implement any list functions again. You have to REUSE
the list functions implemented above.

For example, you can declare your queue as follows.

    struct list *queue;

You can allocate/use this structure to represent a queue, and typecast to
this structure the 'void *' received in the queue_XXX functions.

You can test by using the following commands.

    $ gcc list.c queue.c stub_queue.o -o test_queue
    $ ./test_queue



Exercise 3
----------

Add rules for the target 'test_queue' in the Makefile.

Remember the rule should generate the intermediate .o's before building the
executable 'test_queue'. You can take a look at the previous session Makefiles
for some guidance.

You can test by using 'make test_queue'.

