BINARY SEARCH TREE
------------------

Tree is a connected acyclic graph. (Although you may not understand the full
meaning of this statement, it is worthwhile to remember this).

A tree can have leaf nodes and non-leaf (also called intermediate) nodes.
Leaf nodes have NO children. Non-leaf nodes have ATLEAST one child.

A binary tree is a tree where each node has ATMOST 2 children: a left child,
and a right child.

A binary search tree is a binary tree which follows two rules.
    - All values in left subtree  <  Value at parent
    - All values in right subtree >= Value at parent

A binary search tree with integer values at each node looks as follows.

     4
    / \
   /   \
  2     6
 / \   / \
1   3 5   7


Exercise 1
----------

Create a file bstree.h with the following declarations.

    struct BSTreeNode
    {
        int val;
        struct BSTreeNode *left;
        struct BSTreeNode *right;
    };

    class BSTree
    {
        struct BSTreeNode *root;

    public:
        BSTree();
        void add(int val);
        int search(int val);
    };

The constructor should set the member 'root' to NULL.

The 'add' should allocate a node, assign 'val' to the node, and add the
node to the tree pointed by 'root'.

The 'search' should scan the tree for a node with value 'val'. If such a node
is found, it should return 1, 0 otherwise.

Create a file bstree.cpp with the implementation of the above functions.

You can test using 'make test_bstree1'.


Exercise 2
----------

*** YOU HAVE TO FINISH EXERCISE 1 BEFORE PROCEEDING ***

Modify the class BSTree (in bstree.h) and add the following public member
function.

    void get_postorder(int *arr, int *count);
    int count_leaf_nodes(void); 

The 'get_postorder' should do a postorder traversal of the tree and store the
values in the tree (in postorder sequence) in 'arr' array. It should also store
the number of nodes in the tree in the 'count'.

The 'count_leaf_nodes' should return the number of leaf nodes in the tree.

Implement the above functions in bstree.cpp.

You can test using 'make test_bstree2'.


Exercise 3
----------

*** YOU HAVE TO FINISH EXERCISE 1 BEFORE PROCEEDING ***

Modify the class BSTree (in bstree.h) and add the following public member
function to the class.

    void remove(int val);

The 'remove' should search for a node with value 'val', remove the node
from the tree, and free the memory for the node.

Implement the above function in bstree.cpp.

You can test using 'make test_bstree3'.



