
gcc is the GNU C compiler. g++ is the GNU C++ compiler. Both gcc and g++
have similar options and invocation. This document will use gcc for all the
examples, but the examples would work just as well for g++ too.

OUTPUT OPTIONS
--------------

gcc does pre-processing, compiling, assembling and linking, in that order.
Pre-processing includes '#include' files and expands macros. Compilation and
assembling produces object files. Linking links one or more object files to
produce the executable. The following options control the type of output
file that is generated.

-E	- gcc prints the pre-processed source file in the standard output,
	  which ofcourse can be redirected. The pre-processed output has
	  the '#include' lines replaced with the actual files, and all
	  '#define' macros are substituted in the source code.

	  $ gcc -E test.c

-S	- gcc does pre-processing and compilation to produce assembly code
	  of the source file. This can be very useful in understanding how
	  a compiler works. For eg, looking at an assembly file will give
	  a good idea on how compiler deals with #define macros, const
	  variables, string literals etc. By default, assembly code files
	  are generated by replacing '.c' with '.s'.

	  $ gcc -S test.c

-c	- gcc does pre-processing, compilation and assembling to produce
	  object files. Object files are intermediate files which include
	  symbol information, so that while linking the compiler can replace
	  the relative symbol addresses with actual addresses and produce
	  an executable file. By default, object files are generated by
	  replacing the '.c' extension with '.o'.

	  $ gcc -c test.c


GENERAL OPTIONS
---------------

-o [file]	- Store output file (in whatever format) in the given file
		  name. If you do not want gcc to generate the default output
		  filenames according to the output format, this option can
		  be used to specify a file name.

-Wall		- Enables all warnings. A warning is an indication that there
		  might be some risky code that may result in runtime errors.
		  It is not wise to ignore warnings, because the compiler is
		  trying to help you by pointing out possible errors. By
		  default, gcc does not print all possible warnings that it
		  detects. This option enables gcc to print all detected
		  warnings.

-Werror		- Treat warnings as errors. Usually, even if a compilation has
		  warnings, gcc will still produce the output file and will
		  return success. When compiling a big project with hundreds
		  of source files, you may not want to miss out even on a
		  single warning. In such cases, this option can be used to
		  enable gcc to treat warnings are errors. In this case, when
		  gcc encounters a warning, it immediately prints it as an
		  error, stops compilation and returns failure.

-Idir		- Adds 'dir' to the list of directories that gcc searches for
		  include files. For eg, in a big project where multiple
		  header files are stored in a specific directory, the
		  absolute/relative path of the header file should be given
		  in each '#include' statement. This option can be used to 
		  specify the directory to search for header files, so that
		  the source code can have only '#include <file.h>', and gcc
		  will search for file.h in the given directory also.

