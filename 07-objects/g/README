
Hello Object World!

From this session onwards, problems will be solved using object oriented
programming in C++.

Exercise 1
----------

Create a file string.cpp with the following class AND its implementation.

    #define MAX_LEN    100

    class String
    {
        char data[MAX_LEN];

    public:
        String();
        String(const char *s);

        void get_data(char *s);

        String substring(int start, int count);
    };

The String() constructor should initialize 'data' to an empty string.

The String(const char *s) constructor should copy 's' into 'data'.

the 'get_data' function should copy the string in the 'data' member
variable to 's'. You can use strcpy function for this.

The 'substring' function should create another String object which is a
substring that contains characters in the original string object from
index 'start' to index 'start + count - 1'.

For example, if 's' is a string object with data = "Hello", 
s.substring(1, 3) should return another string object with 
data = "ell".

You can test using 'make test_string'.


Exercise 2
----------

Create a file simplelist.h with the following class declaration.

    #define MAX_ELEMENTS    100

    class SimpleList
    {
        char arr[MAX_ELEMENTS];
        int count;

    public:
        SimpleList();

        int insert(int pos, char c);
        int remove(int pos, char *c);
        int get_count(void);
    };

The 'insert' function should insert 'c' at position 'pos'. If 'pos' is -1,
it should add the character to end of the list. It should return 1 on 
success, 0 otherwise (in case list is full). You may assume that
-1 <= pos < count. Note that inserting a character in the middle of the
array should move all characters following it to the next position.

The 'remove' function should remove the character at position 'pos' and store it
in 'c'. It should return 1 on success, 0 otherwise (list is empty). You may
assume 0 <= pos < count. Note that removing a character from the middle of the
array should move all characters following it to the previous position.

The 'get_count' function should return the number of characters in the list.

You can test using 'make test_simplelist'.


ABSTRACT CLASSES IN C++
-----------------------

There are two problems with the SimpleList above.

    1) The user of the SimpleList is also aware of its implementation 
       details (ie, the list is implemented using an array).
    2) In case the user wants to use a better list implementation (say
       using linked list), the user has to include a new header file
       and recompile his code.

There is no way an user can user another list implementation without
recompiling his code. This is where Abstract Data Types come in.

Abstract Data Types (ADT) are defined in C++ using abstract classes, ie,
classes which have ONLY pure virtual functions. Abstract classes declare ALL
functions as pure virtual functions, and DO NOT declare any data. In other 
words, it does not reveal any implementation details to the user.

A Concrete implementation of an abstract class should derive from the abstract
class and MUST implement ALL pure virtual functions declared in the abstract
class.

A user of the abstract class typically uses a pointer to an abstract class, 
which actually points to an object of a concrete implementation. But the user
is totally unaware of the concrete class or its implementation. So how can the
user obtain a pointer to the abstract class, without knowing about the
concrete class?

This problem is usually solved by declaring a static 'create' method in the
abstract class, which should create an object (of derived class) and return
its pointer. This static methos is generally called the factory method.
The concrete class will implement this static 'create' factory method
by creating an object of the concrete class, and returning pointer to this
object.


Exercise 3
----------

You are provided with an abstract class List in the file list.h.
Open it and see before proceeding.

Create a file arraylist.h with the following class.

    #define MAX_ELEMENTS    100

    class ArrayList : public List
    {
        char arr[MAX_ELEMENTS];
        int count;

    public:
        ArrayList();

        int insert(int pos, char c);
        int remove(int pos, char *c);
        int get_count(void);

    };

Create a file arraylist.cpp with the implementation of the above class.

The file should also define the static factory method of List as follows.

    List * List::create(void);

This function should create an object of type ArrayList and return it.
This is perfectly ok because a pointer to a derived object can be substituted
for a pointer to base object.

You can test by using 'make test_arraylist'.


