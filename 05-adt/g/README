
Exercise 1
----------

Create a file ex1.c with the following declarations and functions.

    struct node
    {
        int num;
        struct node *next;
    };

    struct node *get_last(struct node *head);

The function should goto the end of the linked list with given 'head' and
return the last node in the list.

You can test using 'make test_ex1'.


ABSTRACT DATA TYPES
-------------------

An abstract data type (ADT)is one that is defined ONLY by the operations 
that may be performed on it. Typically, an ADT exports ONLY a set of 
interfaces/methods/functions. The details of how those interfaces are
implemented are completely hidden to the user of the ADT.

For example, an abstract stack data type may be defined using the push and
pop operations. But a stack may be implemented using an array or linked list
or some other data structure. But that is irrelevant to the user of the stack
ADT. The same is true for a queue ADT also.

In general, an abstract data type is not instantiable. That is, the user does
not typically allocate memory or object of an ADT. Instead, the user always
allocates memory/object of a 'derived' or 'concrete' data type which 
'implements' the operations of the ADT. For example, a 'arraystack' is a
derived or concrete implementation of a stack ADT, and users typically
create only objects of type arraystack.



DEFINING ABSTRACT DATA TYPES
----------------------------

Since ADTs are defined only using the operations it exports, it is defined
by creating ONLY a header file which declares the prototypes of these 
operations.


GENERAL INSTRUCTIONS
--------------------

For this session, you will be defining an abstract stack data type with the
following operations. Create a file stack.h which declares the following
operations of the stack ADT.

    void * stack_create(void);

    void stack_free(void *stack);

    int stack_push(void *stack, char c);

    int stack_pop(void *stack, char *c);

    int stack_empty(void *stack);

The function 'stack_create' creates a character stack and 
returns a pointer which can be used to reference that stack. The user can
create multiple stacks and uses this pointer to perform operations on the
corresponding stack. The return value of 'void *' ensures that the user of
the ADT does not know what data structure is used by the implementation.
You will get a better idea about the returned pointer once you read exercise 2.

The function 'stack_push' and 'stack_pop' are similar to the push and pop
you have implemented as part of 03-stack session. That is, stack_push will
push the character and return 1, or return 0 on failure if stack is full. 
And stack_pop should pop topmost character in stack and return 1, or return 0 
if stack is empty.

The functions 'stack_empty' return 1 if stack is empty, or 0 otherwise.


Exercise 2
----------

Create a file arraystack.h that declares the following structure.

    #define STACK_MAX_SIZE 100

    struct arraystack
    {
        char arr[STACK_MAX_SIZE];
        int top;
    };

Note that since an array has a limited size, the stack has a maximum size
defined.

Create a file arraystack.c which includes "stack.h" and "arraystack.h".
The file should implement all stack ADT operations using the 'arraystack'
structure to represent the stack.

The function 'stack_create' should malloc a struct arraystack and return the
pointer. It should also set top to 0.

The function 'stack_free' should free the memory allocated for the struct 
arraystack.

The functions 'stack_push' and 'stack_pop' can typecast the 'void *stack' to
'struct arraystack *' and implement the stack operations.

You can test using 'make test_arraystack'.


Exercise 3
----------

Create a file liststack.h that declares the following structure.

    struct node
    {
        char c;
        struct node *next;
    };

    struct liststack
    {
        struct node *head;
    };

Note that since a linked list does not have any size limitation, there is
no maximum stack size defined.

Create a file liststack.c which includes "stack.h" and "liststack.h".
The file should implement all stack ADT operations using the 'liststack'
structure to represent the stack.

The function 'stack_create' should malloc a struct liststack and return the
pointer. It should also set head to NULL.

The function 'stack_free' should traverse the linked list and free all the
nodes. Finally it should free the memory allocated for the struct liststack.

The functions 'stack_push' and 'stack_pop' can typecast the 'void *stack' to
'struct liststack *' and implement the stack operations.

The function 'stack_empty' should return 1 if stack is empty, or 0 otherwise.

You can test using 'make test_liststack'.


