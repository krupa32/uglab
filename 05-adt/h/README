
Exercise 1
----------

Create a file ex1.c with the following declarations and functions.

    struct node
    {
        int num;
        struct node *next;
    };

    struct node *get_prev(struct node *head, struct node *n);

The function should search the linked list for node 'n', and return the node
that is BEFORE node 'n'.

You can test using 'make test_ex1'.


ABSTRACT DATA TYPES
-------------------

An abstract data type (ADT)is one that is defined ONLY by the operations 
that may be performed on it. Typically, an ADT exports ONLY a set of 
interfaces/methods/functions. The details of how those interfaces are
implemented are completely hidden to the user of the ADT.

For example, an abstract stack data type may be defined using the push and
pop operations. But a stack may be implemented using an array or linked list
or some other data structure. But that is irrelevant to the user of the stack
ADT. The same is true for a queue ADT also.

In general, an abstract data type is not instantiable. That is, the user does
not typically allocate memory or object of an ADT. Instead, the user always
allocates memory/object of a 'derived' or 'concrete' data type which 
'implements' the operations of the ADT. For example, a 'arraystack' is a
derived or concrete implementation of a stack ADT, and users typically
create only objects of type arraystack.



DEFINING ABSTRACT DATA TYPES
----------------------------

Since ADTs are defined only using the operations it exports, it is defined
by creating ONLY a header file which declares the prototypes of these 
operations.


GENERAL INSTRUCTIONS
--------------------

For this session, you will be defining an abstract queue data type with the
following operations. Create a file queue.h which declares the following
operations of the queue ADT.

    void * queue_create(void);

    void queue_free(void *queue);

    int queue_insert(void *queue, char c);

    int queue_remove(void *queue, char *c);

    int queue_empty(void *queue);

The function 'queue_create' creates a character queue and 
returns a pointer which can be used to reference that queue. The user can
create multiple queues and uses this pointer to perform operations on the
corresponding queue. The return value of 'void *' ensures that the user of
the ADT does not know what data structure is used by the implementation.
You will get a better idea about the returned pointer once you read exercise 2.

The function 'queue_insert' should insert 'c' to the end of the queue as the
last character in the queue. It returns 1 on success, 0 on failure if there
is no more space in the queue.

The 'queue_remove' should remove the first character in the queue and
store in the address pointer by 'c'.

The functions 'queue_empty' return 1 if queue is empty, or 0 otherwise.


Exercise 2
----------

Create a file arrayqueue.h that declares the following structure.

    #define QUEUE_MAX_SIZE 100

    struct arrayqueue
    {
        char arr[QUEUE_MAX_SIZE];
        int tail;
    };

Note that since an array has a limited size, the queue has a maximum size
defined.

Create a file arrayqueue.c which includes "queue.h" and "arrayqueue.h".
The file should implement all queue ADT operations using the 'arrayqueue'
structure to represent the queue.

The function 'queue_create' should malloc a struct arrayqueue and return the
pointer. It should also set tail to 0.

The function 'queue_free' should free the memory allocated for the struct 
arrayqueue.

The functions 'queue_insert' and 'queue_remove' can typecast the 'void *queue' 
to 'struct arrayqueue *' and implement the queue operations.

The function 'queue_empty' should return 1 if queue is empty, 0 otherwise.

You can test using 'make test_arrayqueue'.


Exercise 3
----------

Create a file listqueue.h that declares the following structure.

    struct node
    {
        char c;
        struct node *next;
    };

    struct listqueue
    {
        struct node *head;
    };

Note that since a linked list does not have any size limitation, there is
no maximum queue size defined.

Create a file listqueue.c which includes "queue.h" and "listqueue.h".
The file should implement all queue ADT operations using the 'listqueue'
structure to represent the queue.

The function 'queue_create' should malloc a struct listqueue and return the
pointer. It should also set head to NULL.

The function 'queue_free' should traverse the linked list and free all the
nodes. Finally it should free the memory allocated for the struct listqueue.

The functions 'queue_insert' and 'queue_remove' can typecast the 'void *queue' 
to 'struct listqueue *' and implement the queue operations.

The function 'queue_empty' should return 1 if queue is empty, or 0 otherwise.

You can test using 'make test_listqueue'.


