
GENERAL INSTRUCTIONS
--------------------

1) Every function carries some marks, as indicated.
   Every function MUST be defined for the test programs to compile and run.
   Therefore, if you know how to implement func1(), but don't know how to
   implement func2(), define an empty func2() with the same prototype as
   mentioned in the question. Your func2() may fail the tests, but your
   func1() may pass and you may get marks for that.


Exercise 1
----------

Create a file stack.c which implements an integer stack of 50 integers.
The stack should support the following functions.

    int push(int val);  [ 4 ]
    int pop(int *val);  [ 4 ]
    int empty(void);    [ 2 ]

The 'push' function should push the number 'val' onto top of the stack.
It should return 1 on success, 0 on failure (ie, stack is full).

The 'pop' function should pop the topmost number of the stack and store it
in 'val'. It should return 1 on success, or 0 on failure (ie, stack is empty).

The 'empty' function should return 1 if stack is empty, 0 otherwise.

You can compile and test using 'make test_stack'.


Exercise 2
----------

Create a file bstree.h with the following class declaration.

    struct Node
    {
        int val;
        struct Node *left;
        struct Node *right;
    };

    class BSTree
    {
        struct Node *root;

    public:
        BSTree();
        void insert(int val);                   [ 4 ]
        void inorder(int *arr, int *count);     [ 3 ]
        int search(int val, int *nops);         [ 2, for return value
                                                  1, for nops ]
    };

The 'insert' should insert 'val' into the binary search tree.

The 'inorder' should do an inorder traversal of the tree and store the
numbers in the tree (in inorder form) in the 'arr' array. It should also
store the total number of nodes in the tree in 'count'.

The 'search' should search for the value 'val' in the tree. It should
return 1 if 'val' is found, 0 otherwise. Also, if 'val' is found, the
number of operations should be stored in 'nops'. Numer of operations
is defined as the number of nodes visited in finding val (including the 
node for 'val').

Create a file bstree.cpp which implements the BSTree class.

You can test using 'make test_bstree'.


Exercise 3
----------

Create a file heap.h with the following declarations.

    struct Node
    {
        int val;
        struct Node *next;
    };

    class Heap
    {
        struct Node *head;

    public:
        Heap();
        struct Node *get_head(void);
        void insert(struct Node *n);   [ 5 ]
    };

The class Heap should implement a MIN HEAP using a singly linked list.

The 'get_head' should return the root of the heap, which is the head of
the linked list.

The 'insert' should insert the node 'n' into the heap. Note that the node
pointer is directly inserted. A new struct Node MUST NOT be allocated.

Insertion is done by adding the node to the tail of the linked list,
and then rearranging the values in the nodes so that the heap property
is satisfied. Note that while rearranging, it is enough to swap the values,
it is not required to move the node pointers itself.

Create file heap.cpp which implements the above class.

You can test using 'make test_heap'.


